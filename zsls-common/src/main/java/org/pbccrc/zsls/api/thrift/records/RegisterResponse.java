/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pbccrc.zsls.api.thrift.records;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-6")
public class RegisterResponse implements org.apache.thrift.TBase<RegisterResponse, RegisterResponse._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterResponse");

  private static final org.apache.thrift.protocol.TField NODE_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeAction", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEART_BEAT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("heartBeatInterval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REGISTRY_SESS_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("registrySessTimeout", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegisterResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegisterResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see NodeAction
   */
  public NodeAction nodeAction; // required
  public int heartBeatInterval; // required
  public int registrySessTimeout; // required
  public String message; // optional
  public TCluster cluster; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see NodeAction
     */
    NODE_ACTION((short)1, "nodeAction"),
    HEART_BEAT_INTERVAL((short)2, "heartBeatInterval"),
    REGISTRY_SESS_TIMEOUT((short)3, "registrySessTimeout"),
    MESSAGE((short)4, "message"),
    CLUSTER((short)5, "cluster");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ACTION
          return NODE_ACTION;
        case 2: // HEART_BEAT_INTERVAL
          return HEART_BEAT_INTERVAL;
        case 3: // REGISTRY_SESS_TIMEOUT
          return REGISTRY_SESS_TIMEOUT;
        case 4: // MESSAGE
          return MESSAGE;
        case 5: // CLUSTER
          return CLUSTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEARTBEATINTERVAL_ISSET_ID = 0;
  private static final int __REGISTRYSESSTIMEOUT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MESSAGE,_Fields.CLUSTER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ACTION, new org.apache.thrift.meta_data.FieldMetaData("nodeAction", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeAction.class)));
    tmpMap.put(_Fields.HEART_BEAT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("heartBeatInterval", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTRY_SESS_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("registrySessTimeout", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCluster.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterResponse.class, metaDataMap);
  }

  public RegisterResponse() {
  }

  public RegisterResponse(
    NodeAction nodeAction,
    int heartBeatInterval,
    int registrySessTimeout)
  {
    this();
    this.nodeAction = nodeAction;
    this.heartBeatInterval = heartBeatInterval;
    setHeartBeatIntervalIsSet(true);
    this.registrySessTimeout = registrySessTimeout;
    setRegistrySessTimeoutIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisterResponse(RegisterResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeAction()) {
      this.nodeAction = other.nodeAction;
    }
    this.heartBeatInterval = other.heartBeatInterval;
    this.registrySessTimeout = other.registrySessTimeout;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetCluster()) {
      this.cluster = new TCluster(other.cluster);
    }
  }

  public RegisterResponse deepCopy() {
    return new RegisterResponse(this);
  }

  @Override
  public void clear() {
    this.nodeAction = null;
    setHeartBeatIntervalIsSet(false);
    this.heartBeatInterval = 0;
    setRegistrySessTimeoutIsSet(false);
    this.registrySessTimeout = 0;
    this.message = null;
    this.cluster = null;
  }

  /**
   * 
   * @see NodeAction
   */
  public NodeAction getNodeAction() {
    return this.nodeAction;
  }

  /**
   * 
   * @see NodeAction
   */
  public RegisterResponse setNodeAction(NodeAction nodeAction) {
    this.nodeAction = nodeAction;
    return this;
  }

  public void unsetNodeAction() {
    this.nodeAction = null;
  }

  /** Returns true if field nodeAction is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeAction() {
    return this.nodeAction != null;
  }

  public void setNodeActionIsSet(boolean value) {
    if (!value) {
      this.nodeAction = null;
    }
  }

  public int getHeartBeatInterval() {
    return this.heartBeatInterval;
  }

  public RegisterResponse setHeartBeatInterval(int heartBeatInterval) {
    this.heartBeatInterval = heartBeatInterval;
    setHeartBeatIntervalIsSet(true);
    return this;
  }

  public void unsetHeartBeatInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEARTBEATINTERVAL_ISSET_ID);
  }

  /** Returns true if field heartBeatInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartBeatInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __HEARTBEATINTERVAL_ISSET_ID);
  }

  public void setHeartBeatIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEARTBEATINTERVAL_ISSET_ID, value);
  }

  public int getRegistrySessTimeout() {
    return this.registrySessTimeout;
  }

  public RegisterResponse setRegistrySessTimeout(int registrySessTimeout) {
    this.registrySessTimeout = registrySessTimeout;
    setRegistrySessTimeoutIsSet(true);
    return this;
  }

  public void unsetRegistrySessTimeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRYSESSTIMEOUT_ISSET_ID);
  }

  /** Returns true if field registrySessTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrySessTimeout() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRYSESSTIMEOUT_ISSET_ID);
  }

  public void setRegistrySessTimeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRYSESSTIMEOUT_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public RegisterResponse setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public TCluster getCluster() {
    return this.cluster;
  }

  public RegisterResponse setCluster(TCluster cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ACTION:
      if (value == null) {
        unsetNodeAction();
      } else {
        setNodeAction((NodeAction)value);
      }
      break;

    case HEART_BEAT_INTERVAL:
      if (value == null) {
        unsetHeartBeatInterval();
      } else {
        setHeartBeatInterval((Integer)value);
      }
      break;

    case REGISTRY_SESS_TIMEOUT:
      if (value == null) {
        unsetRegistrySessTimeout();
      } else {
        setRegistrySessTimeout((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((TCluster)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ACTION:
      return getNodeAction();

    case HEART_BEAT_INTERVAL:
      return Integer.valueOf(getHeartBeatInterval());

    case REGISTRY_SESS_TIMEOUT:
      return Integer.valueOf(getRegistrySessTimeout());

    case MESSAGE:
      return getMessage();

    case CLUSTER:
      return getCluster();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ACTION:
      return isSetNodeAction();
    case HEART_BEAT_INTERVAL:
      return isSetHeartBeatInterval();
    case REGISTRY_SESS_TIMEOUT:
      return isSetRegistrySessTimeout();
    case MESSAGE:
      return isSetMessage();
    case CLUSTER:
      return isSetCluster();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisterResponse)
      return this.equals((RegisterResponse)that);
    return false;
  }

  public boolean equals(RegisterResponse that) {
    if (that == null)
      return false;

    boolean this_present_nodeAction = true && this.isSetNodeAction();
    boolean that_present_nodeAction = true && that.isSetNodeAction();
    if (this_present_nodeAction || that_present_nodeAction) {
      if (!(this_present_nodeAction && that_present_nodeAction))
        return false;
      if (!this.nodeAction.equals(that.nodeAction))
        return false;
    }

    boolean this_present_heartBeatInterval = true;
    boolean that_present_heartBeatInterval = true;
    if (this_present_heartBeatInterval || that_present_heartBeatInterval) {
      if (!(this_present_heartBeatInterval && that_present_heartBeatInterval))
        return false;
      if (this.heartBeatInterval != that.heartBeatInterval)
        return false;
    }

    boolean this_present_registrySessTimeout = true;
    boolean that_present_registrySessTimeout = true;
    if (this_present_registrySessTimeout || that_present_registrySessTimeout) {
      if (!(this_present_registrySessTimeout && that_present_registrySessTimeout))
        return false;
      if (this.registrySessTimeout != that.registrySessTimeout)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_nodeAction = true && (isSetNodeAction());
    list.add(present_nodeAction);
    if (present_nodeAction)
      list.add(nodeAction.getValue());

    boolean present_heartBeatInterval = true;
    list.add(present_heartBeatInterval);
    if (present_heartBeatInterval)
      list.add(heartBeatInterval);

    boolean present_registrySessTimeout = true;
    list.add(present_registrySessTimeout);
    if (present_registrySessTimeout)
      list.add(registrySessTimeout);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_cluster = true && (isSetCluster());
    list.add(present_cluster);
    if (present_cluster)
      list.add(cluster);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegisterResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNodeAction()).compareTo(other.isSetNodeAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeAction, other.nodeAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartBeatInterval()).compareTo(other.isSetHeartBeatInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartBeatInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartBeatInterval, other.heartBeatInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrySessTimeout()).compareTo(other.isSetRegistrySessTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrySessTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrySessTimeout, other.registrySessTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegisterResponse(");
    boolean first = true;

    sb.append("nodeAction:");
    if (this.nodeAction == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeAction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartBeatInterval:");
    sb.append(this.heartBeatInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registrySessTimeout:");
    sb.append(this.registrySessTimeout);
    first = false;
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetCluster()) {
      if (!first) sb.append(", ");
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeAction == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeAction' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'heartBeatInterval' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'registrySessTimeout' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (cluster != null) {
      cluster.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegisterResponseStandardSchemeFactory implements SchemeFactory {
    public RegisterResponseStandardScheme getScheme() {
      return new RegisterResponseStandardScheme();
    }
  }

  private static class RegisterResponseStandardScheme extends StandardScheme<RegisterResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeAction = org.pbccrc.zsls.api.thrift.records.NodeAction.findByValue(iprot.readI32());
              struct.setNodeActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEART_BEAT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heartBeatInterval = iprot.readI32();
              struct.setHeartBeatIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGISTRY_SESS_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registrySessTimeout = iprot.readI32();
              struct.setRegistrySessTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cluster = new TCluster();
              struct.cluster.read(iprot);
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHeartBeatInterval()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'heartBeatInterval' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRegistrySessTimeout()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'registrySessTimeout' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeAction != null) {
        oprot.writeFieldBegin(NODE_ACTION_FIELD_DESC);
        oprot.writeI32(struct.nodeAction.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEART_BEAT_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.heartBeatInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGISTRY_SESS_TIMEOUT_FIELD_DESC);
      oprot.writeI32(struct.registrySessTimeout);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          struct.cluster.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegisterResponseTupleSchemeFactory implements SchemeFactory {
    public RegisterResponseTupleScheme getScheme() {
      return new RegisterResponseTupleScheme();
    }
  }

  private static class RegisterResponseTupleScheme extends TupleScheme<RegisterResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegisterResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.nodeAction.getValue());
      oprot.writeI32(struct.heartBeatInterval);
      oprot.writeI32(struct.registrySessTimeout);
      BitSet optionals = new BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetCluster()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetCluster()) {
        struct.cluster.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegisterResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.nodeAction = org.pbccrc.zsls.api.thrift.records.NodeAction.findByValue(iprot.readI32());
      struct.setNodeActionIsSet(true);
      struct.heartBeatInterval = iprot.readI32();
      struct.setHeartBeatIntervalIsSet(true);
      struct.registrySessTimeout = iprot.readI32();
      struct.setRegistrySessTimeoutIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cluster = new TCluster();
        struct.cluster.read(iprot);
        struct.setClusterIsSet(true);
      }
    }
  }

}

