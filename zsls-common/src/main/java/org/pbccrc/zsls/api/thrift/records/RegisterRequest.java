/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pbccrc.zsls.api.thrift.records;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-6")
public class RegisterRequest implements org.apache.thrift.TBase<RegisterRequest, RegisterRequest._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterRequest");

  private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODEID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeid", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MAXNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxnum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("isDt", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField RUNNING_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("runningTasks", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TASK_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskResults", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegisterRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegisterRequestTupleSchemeFactory());
  }

  public String domain; // required
  public TNodeId nodeid; // required
  public int maxnum; // required
  public boolean isDt; // optional
  public List<TTaskId> runningTasks; // optional
  public List<TTaskResult> taskResults; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOMAIN((short)1, "domain"),
    NODEID((short)2, "nodeid"),
    MAXNUM((short)3, "maxnum"),
    IS_DT((short)4, "isDt"),
    RUNNING_TASKS((short)5, "runningTasks"),
    TASK_RESULTS((short)6, "taskResults");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAIN
          return DOMAIN;
        case 2: // NODEID
          return NODEID;
        case 3: // MAXNUM
          return MAXNUM;
        case 4: // IS_DT
          return IS_DT;
        case 5: // RUNNING_TASKS
          return RUNNING_TASKS;
        case 6: // TASK_RESULTS
          return TASK_RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXNUM_ISSET_ID = 0;
  private static final int __ISDT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_DT,_Fields.RUNNING_TASKS,_Fields.TASK_RESULTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODEID, new org.apache.thrift.meta_data.FieldMetaData("nodeid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodeId.class)));
    tmpMap.put(_Fields.MAXNUM, new org.apache.thrift.meta_data.FieldMetaData("maxnum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DT, new org.apache.thrift.meta_data.FieldMetaData("isDt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUNNING_TASKS, new org.apache.thrift.meta_data.FieldMetaData("runningTasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTaskId.class))));
    tmpMap.put(_Fields.TASK_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("taskResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTaskResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterRequest.class, metaDataMap);
  }

  public RegisterRequest() {
  }

  public RegisterRequest(
    String domain,
    TNodeId nodeid,
    int maxnum)
  {
    this();
    this.domain = domain;
    this.nodeid = nodeid;
    this.maxnum = maxnum;
    setMaxnumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisterRequest(RegisterRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDomain()) {
      this.domain = other.domain;
    }
    if (other.isSetNodeid()) {
      this.nodeid = new TNodeId(other.nodeid);
    }
    this.maxnum = other.maxnum;
    this.isDt = other.isDt;
    if (other.isSetRunningTasks()) {
      List<TTaskId> __this__runningTasks = new ArrayList<TTaskId>(other.runningTasks.size());
      for (TTaskId other_element : other.runningTasks) {
        __this__runningTasks.add(new TTaskId(other_element));
      }
      this.runningTasks = __this__runningTasks;
    }
    if (other.isSetTaskResults()) {
      List<TTaskResult> __this__taskResults = new ArrayList<TTaskResult>(other.taskResults.size());
      for (TTaskResult other_element : other.taskResults) {
        __this__taskResults.add(new TTaskResult(other_element));
      }
      this.taskResults = __this__taskResults;
    }
  }

  public RegisterRequest deepCopy() {
    return new RegisterRequest(this);
  }

  @Override
  public void clear() {
    this.domain = null;
    this.nodeid = null;
    setMaxnumIsSet(false);
    this.maxnum = 0;
    setIsDtIsSet(false);
    this.isDt = false;
    this.runningTasks = null;
    this.taskResults = null;
  }

  public String getDomain() {
    return this.domain;
  }

  public RegisterRequest setDomain(String domain) {
    this.domain = domain;
    return this;
  }

  public void unsetDomain() {
    this.domain = null;
  }

  /** Returns true if field domain is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain() {
    return this.domain != null;
  }

  public void setDomainIsSet(boolean value) {
    if (!value) {
      this.domain = null;
    }
  }

  public TNodeId getNodeid() {
    return this.nodeid;
  }

  public RegisterRequest setNodeid(TNodeId nodeid) {
    this.nodeid = nodeid;
    return this;
  }

  public void unsetNodeid() {
    this.nodeid = null;
  }

  /** Returns true if field nodeid is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeid() {
    return this.nodeid != null;
  }

  public void setNodeidIsSet(boolean value) {
    if (!value) {
      this.nodeid = null;
    }
  }

  public int getMaxnum() {
    return this.maxnum;
  }

  public RegisterRequest setMaxnum(int maxnum) {
    this.maxnum = maxnum;
    setMaxnumIsSet(true);
    return this;
  }

  public void unsetMaxnum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  /** Returns true if field maxnum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxnum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  public void setMaxnumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNUM_ISSET_ID, value);
  }

  public boolean isIsDt() {
    return this.isDt;
  }

  public RegisterRequest setIsDt(boolean isDt) {
    this.isDt = isDt;
    setIsDtIsSet(true);
    return this;
  }

  public void unsetIsDt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDT_ISSET_ID);
  }

  /** Returns true if field isDt is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDt() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDT_ISSET_ID);
  }

  public void setIsDtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDT_ISSET_ID, value);
  }

  public int getRunningTasksSize() {
    return (this.runningTasks == null) ? 0 : this.runningTasks.size();
  }

  public java.util.Iterator<TTaskId> getRunningTasksIterator() {
    return (this.runningTasks == null) ? null : this.runningTasks.iterator();
  }

  public void addToRunningTasks(TTaskId elem) {
    if (this.runningTasks == null) {
      this.runningTasks = new ArrayList<TTaskId>();
    }
    this.runningTasks.add(elem);
  }

  public List<TTaskId> getRunningTasks() {
    return this.runningTasks;
  }

  public RegisterRequest setRunningTasks(List<TTaskId> runningTasks) {
    this.runningTasks = runningTasks;
    return this;
  }

  public void unsetRunningTasks() {
    this.runningTasks = null;
  }

  /** Returns true if field runningTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetRunningTasks() {
    return this.runningTasks != null;
  }

  public void setRunningTasksIsSet(boolean value) {
    if (!value) {
      this.runningTasks = null;
    }
  }

  public int getTaskResultsSize() {
    return (this.taskResults == null) ? 0 : this.taskResults.size();
  }

  public java.util.Iterator<TTaskResult> getTaskResultsIterator() {
    return (this.taskResults == null) ? null : this.taskResults.iterator();
  }

  public void addToTaskResults(TTaskResult elem) {
    if (this.taskResults == null) {
      this.taskResults = new ArrayList<TTaskResult>();
    }
    this.taskResults.add(elem);
  }

  public List<TTaskResult> getTaskResults() {
    return this.taskResults;
  }

  public RegisterRequest setTaskResults(List<TTaskResult> taskResults) {
    this.taskResults = taskResults;
    return this;
  }

  public void unsetTaskResults() {
    this.taskResults = null;
  }

  /** Returns true if field taskResults is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskResults() {
    return this.taskResults != null;
  }

  public void setTaskResultsIsSet(boolean value) {
    if (!value) {
      this.taskResults = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOMAIN:
      if (value == null) {
        unsetDomain();
      } else {
        setDomain((String)value);
      }
      break;

    case NODEID:
      if (value == null) {
        unsetNodeid();
      } else {
        setNodeid((TNodeId)value);
      }
      break;

    case MAXNUM:
      if (value == null) {
        unsetMaxnum();
      } else {
        setMaxnum((Integer)value);
      }
      break;

    case IS_DT:
      if (value == null) {
        unsetIsDt();
      } else {
        setIsDt((Boolean)value);
      }
      break;

    case RUNNING_TASKS:
      if (value == null) {
        unsetRunningTasks();
      } else {
        setRunningTasks((List<TTaskId>)value);
      }
      break;

    case TASK_RESULTS:
      if (value == null) {
        unsetTaskResults();
      } else {
        setTaskResults((List<TTaskResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAIN:
      return getDomain();

    case NODEID:
      return getNodeid();

    case MAXNUM:
      return Integer.valueOf(getMaxnum());

    case IS_DT:
      return Boolean.valueOf(isIsDt());

    case RUNNING_TASKS:
      return getRunningTasks();

    case TASK_RESULTS:
      return getTaskResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOMAIN:
      return isSetDomain();
    case NODEID:
      return isSetNodeid();
    case MAXNUM:
      return isSetMaxnum();
    case IS_DT:
      return isSetIsDt();
    case RUNNING_TASKS:
      return isSetRunningTasks();
    case TASK_RESULTS:
      return isSetTaskResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisterRequest)
      return this.equals((RegisterRequest)that);
    return false;
  }

  public boolean equals(RegisterRequest that) {
    if (that == null)
      return false;

    boolean this_present_domain = true && this.isSetDomain();
    boolean that_present_domain = true && that.isSetDomain();
    if (this_present_domain || that_present_domain) {
      if (!(this_present_domain && that_present_domain))
        return false;
      if (!this.domain.equals(that.domain))
        return false;
    }

    boolean this_present_nodeid = true && this.isSetNodeid();
    boolean that_present_nodeid = true && that.isSetNodeid();
    if (this_present_nodeid || that_present_nodeid) {
      if (!(this_present_nodeid && that_present_nodeid))
        return false;
      if (!this.nodeid.equals(that.nodeid))
        return false;
    }

    boolean this_present_maxnum = true;
    boolean that_present_maxnum = true;
    if (this_present_maxnum || that_present_maxnum) {
      if (!(this_present_maxnum && that_present_maxnum))
        return false;
      if (this.maxnum != that.maxnum)
        return false;
    }

    boolean this_present_isDt = true && this.isSetIsDt();
    boolean that_present_isDt = true && that.isSetIsDt();
    if (this_present_isDt || that_present_isDt) {
      if (!(this_present_isDt && that_present_isDt))
        return false;
      if (this.isDt != that.isDt)
        return false;
    }

    boolean this_present_runningTasks = true && this.isSetRunningTasks();
    boolean that_present_runningTasks = true && that.isSetRunningTasks();
    if (this_present_runningTasks || that_present_runningTasks) {
      if (!(this_present_runningTasks && that_present_runningTasks))
        return false;
      if (!this.runningTasks.equals(that.runningTasks))
        return false;
    }

    boolean this_present_taskResults = true && this.isSetTaskResults();
    boolean that_present_taskResults = true && that.isSetTaskResults();
    if (this_present_taskResults || that_present_taskResults) {
      if (!(this_present_taskResults && that_present_taskResults))
        return false;
      if (!this.taskResults.equals(that.taskResults))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_domain = true && (isSetDomain());
    list.add(present_domain);
    if (present_domain)
      list.add(domain);

    boolean present_nodeid = true && (isSetNodeid());
    list.add(present_nodeid);
    if (present_nodeid)
      list.add(nodeid);

    boolean present_maxnum = true;
    list.add(present_maxnum);
    if (present_maxnum)
      list.add(maxnum);

    boolean present_isDt = true && (isSetIsDt());
    list.add(present_isDt);
    if (present_isDt)
      list.add(isDt);

    boolean present_runningTasks = true && (isSetRunningTasks());
    list.add(present_runningTasks);
    if (present_runningTasks)
      list.add(runningTasks);

    boolean present_taskResults = true && (isSetTaskResults());
    list.add(present_taskResults);
    if (present_taskResults)
      list.add(taskResults);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegisterRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeid()).compareTo(other.isSetNodeid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeid, other.nodeid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxnum()).compareTo(other.isSetMaxnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxnum, other.maxnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDt()).compareTo(other.isSetIsDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDt, other.isDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunningTasks()).compareTo(other.isSetRunningTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunningTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runningTasks, other.runningTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskResults()).compareTo(other.isSetTaskResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskResults, other.taskResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegisterRequest(");
    boolean first = true;

    sb.append("domain:");
    if (this.domain == null) {
      sb.append("null");
    } else {
      sb.append(this.domain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeid:");
    if (this.nodeid == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxnum:");
    sb.append(this.maxnum);
    first = false;
    if (isSetIsDt()) {
      if (!first) sb.append(", ");
      sb.append("isDt:");
      sb.append(this.isDt);
      first = false;
    }
    if (isSetRunningTasks()) {
      if (!first) sb.append(", ");
      sb.append("runningTasks:");
      if (this.runningTasks == null) {
        sb.append("null");
      } else {
        sb.append(this.runningTasks);
      }
      first = false;
    }
    if (isSetTaskResults()) {
      if (!first) sb.append(", ");
      sb.append("taskResults:");
      if (this.taskResults == null) {
        sb.append("null");
      } else {
        sb.append(this.taskResults);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (domain == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain' was not present! Struct: " + toString());
    }
    if (nodeid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'maxnum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (nodeid != null) {
      nodeid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegisterRequestStandardSchemeFactory implements SchemeFactory {
    public RegisterRequestStandardScheme getScheme() {
      return new RegisterRequestStandardScheme();
    }
  }

  private static class RegisterRequestStandardScheme extends StandardScheme<RegisterRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domain = iprot.readString();
              struct.setDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODEID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeid = new TNodeId();
              struct.nodeid.read(iprot);
              struct.setNodeidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAXNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxnum = iprot.readI32();
              struct.setMaxnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDt = iprot.readBool();
              struct.setIsDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RUNNING_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.runningTasks = new ArrayList<TTaskId>(_list20.size);
                TTaskId _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = new TTaskId();
                  _elem21.read(iprot);
                  struct.runningTasks.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setRunningTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TASK_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.taskResults = new ArrayList<TTaskResult>(_list23.size);
                TTaskResult _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = new TTaskResult();
                  _elem24.read(iprot);
                  struct.taskResults.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setTaskResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMaxnum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxnum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(struct.domain);
        oprot.writeFieldEnd();
      }
      if (struct.nodeid != null) {
        oprot.writeFieldBegin(NODEID_FIELD_DESC);
        struct.nodeid.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAXNUM_FIELD_DESC);
      oprot.writeI32(struct.maxnum);
      oprot.writeFieldEnd();
      if (struct.isSetIsDt()) {
        oprot.writeFieldBegin(IS_DT_FIELD_DESC);
        oprot.writeBool(struct.isDt);
        oprot.writeFieldEnd();
      }
      if (struct.runningTasks != null) {
        if (struct.isSetRunningTasks()) {
          oprot.writeFieldBegin(RUNNING_TASKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.runningTasks.size()));
            for (TTaskId _iter26 : struct.runningTasks)
            {
              _iter26.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.taskResults != null) {
        if (struct.isSetTaskResults()) {
          oprot.writeFieldBegin(TASK_RESULTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taskResults.size()));
            for (TTaskResult _iter27 : struct.taskResults)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegisterRequestTupleSchemeFactory implements SchemeFactory {
    public RegisterRequestTupleScheme getScheme() {
      return new RegisterRequestTupleScheme();
    }
  }

  private static class RegisterRequestTupleScheme extends TupleScheme<RegisterRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegisterRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.domain);
      struct.nodeid.write(oprot);
      oprot.writeI32(struct.maxnum);
      BitSet optionals = new BitSet();
      if (struct.isSetIsDt()) {
        optionals.set(0);
      }
      if (struct.isSetRunningTasks()) {
        optionals.set(1);
      }
      if (struct.isSetTaskResults()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIsDt()) {
        oprot.writeBool(struct.isDt);
      }
      if (struct.isSetRunningTasks()) {
        {
          oprot.writeI32(struct.runningTasks.size());
          for (TTaskId _iter28 : struct.runningTasks)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetTaskResults()) {
        {
          oprot.writeI32(struct.taskResults.size());
          for (TTaskResult _iter29 : struct.taskResults)
          {
            _iter29.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegisterRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.domain = iprot.readString();
      struct.setDomainIsSet(true);
      struct.nodeid = new TNodeId();
      struct.nodeid.read(iprot);
      struct.setNodeidIsSet(true);
      struct.maxnum = iprot.readI32();
      struct.setMaxnumIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.isDt = iprot.readBool();
        struct.setIsDtIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.runningTasks = new ArrayList<TTaskId>(_list30.size);
          TTaskId _elem31;
          for (int _i32 = 0; _i32 < _list30.size; ++_i32)
          {
            _elem31 = new TTaskId();
            _elem31.read(iprot);
            struct.runningTasks.add(_elem31);
          }
        }
        struct.setRunningTasksIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskResults = new ArrayList<TTaskResult>(_list33.size);
          TTaskResult _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = new TTaskResult();
            _elem34.read(iprot);
            struct.taskResults.add(_elem34);
          }
        }
        struct.setTaskResultsIsSet(true);
      }
    }
  }

}

