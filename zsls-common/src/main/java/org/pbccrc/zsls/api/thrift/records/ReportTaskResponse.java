/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pbccrc.zsls.api.thrift.records;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-6")
public class ReportTaskResponse implements org.apache.thrift.TBase<ReportTaskResponse, ReportTaskResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ReportTaskResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportTaskResponse");

  private static final org.apache.thrift.protocol.TField NODE_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeAction", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("newTasks", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportTaskResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportTaskResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see NodeAction
   */
  public NodeAction nodeAction; // required
  public List<TTaskInfo> newTasks; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see NodeAction
     */
    NODE_ACTION((short)1, "nodeAction"),
    NEW_TASKS((short)2, "newTasks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ACTION
          return NODE_ACTION;
        case 2: // NEW_TASKS
          return NEW_TASKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NEW_TASKS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ACTION, new org.apache.thrift.meta_data.FieldMetaData("nodeAction", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeAction.class)));
    tmpMap.put(_Fields.NEW_TASKS, new org.apache.thrift.meta_data.FieldMetaData("newTasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTaskInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportTaskResponse.class, metaDataMap);
  }

  public ReportTaskResponse() {
  }

  public ReportTaskResponse(
    NodeAction nodeAction)
  {
    this();
    this.nodeAction = nodeAction;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportTaskResponse(ReportTaskResponse other) {
    if (other.isSetNodeAction()) {
      this.nodeAction = other.nodeAction;
    }
    if (other.isSetNewTasks()) {
      List<TTaskInfo> __this__newTasks = new ArrayList<TTaskInfo>(other.newTasks.size());
      for (TTaskInfo other_element : other.newTasks) {
        __this__newTasks.add(new TTaskInfo(other_element));
      }
      this.newTasks = __this__newTasks;
    }
  }

  public ReportTaskResponse deepCopy() {
    return new ReportTaskResponse(this);
  }

  @Override
  public void clear() {
    this.nodeAction = null;
    this.newTasks = null;
  }

  /**
   * 
   * @see NodeAction
   */
  public NodeAction getNodeAction() {
    return this.nodeAction;
  }

  /**
   * 
   * @see NodeAction
   */
  public ReportTaskResponse setNodeAction(NodeAction nodeAction) {
    this.nodeAction = nodeAction;
    return this;
  }

  public void unsetNodeAction() {
    this.nodeAction = null;
  }

  /** Returns true if field nodeAction is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeAction() {
    return this.nodeAction != null;
  }

  public void setNodeActionIsSet(boolean value) {
    if (!value) {
      this.nodeAction = null;
    }
  }

  public int getNewTasksSize() {
    return (this.newTasks == null) ? 0 : this.newTasks.size();
  }

  public java.util.Iterator<TTaskInfo> getNewTasksIterator() {
    return (this.newTasks == null) ? null : this.newTasks.iterator();
  }

  public void addToNewTasks(TTaskInfo elem) {
    if (this.newTasks == null) {
      this.newTasks = new ArrayList<TTaskInfo>();
    }
    this.newTasks.add(elem);
  }

  public List<TTaskInfo> getNewTasks() {
    return this.newTasks;
  }

  public ReportTaskResponse setNewTasks(List<TTaskInfo> newTasks) {
    this.newTasks = newTasks;
    return this;
  }

  public void unsetNewTasks() {
    this.newTasks = null;
  }

  /** Returns true if field newTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTasks() {
    return this.newTasks != null;
  }

  public void setNewTasksIsSet(boolean value) {
    if (!value) {
      this.newTasks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ACTION:
      if (value == null) {
        unsetNodeAction();
      } else {
        setNodeAction((NodeAction)value);
      }
      break;

    case NEW_TASKS:
      if (value == null) {
        unsetNewTasks();
      } else {
        setNewTasks((List<TTaskInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ACTION:
      return getNodeAction();

    case NEW_TASKS:
      return getNewTasks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ACTION:
      return isSetNodeAction();
    case NEW_TASKS:
      return isSetNewTasks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportTaskResponse)
      return this.equals((ReportTaskResponse)that);
    return false;
  }

  public boolean equals(ReportTaskResponse that) {
    if (that == null)
      return false;

    boolean this_present_nodeAction = true && this.isSetNodeAction();
    boolean that_present_nodeAction = true && that.isSetNodeAction();
    if (this_present_nodeAction || that_present_nodeAction) {
      if (!(this_present_nodeAction && that_present_nodeAction))
        return false;
      if (!this.nodeAction.equals(that.nodeAction))
        return false;
    }

    boolean this_present_newTasks = true && this.isSetNewTasks();
    boolean that_present_newTasks = true && that.isSetNewTasks();
    if (this_present_newTasks || that_present_newTasks) {
      if (!(this_present_newTasks && that_present_newTasks))
        return false;
      if (!this.newTasks.equals(that.newTasks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_nodeAction = true && (isSetNodeAction());
    list.add(present_nodeAction);
    if (present_nodeAction)
      list.add(nodeAction.getValue());

    boolean present_newTasks = true && (isSetNewTasks());
    list.add(present_newTasks);
    if (present_newTasks)
      list.add(newTasks);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportTaskResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNodeAction()).compareTo(other.isSetNodeAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeAction, other.nodeAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewTasks()).compareTo(other.isSetNewTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTasks, other.newTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportTaskResponse(");
    boolean first = true;

    sb.append("nodeAction:");
    if (this.nodeAction == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeAction);
    }
    first = false;
    if (isSetNewTasks()) {
      if (!first) sb.append(", ");
      sb.append("newTasks:");
      if (this.newTasks == null) {
        sb.append("null");
      } else {
        sb.append(this.newTasks);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeAction == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeAction' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportTaskResponseStandardSchemeFactory implements SchemeFactory {
    public ReportTaskResponseStandardScheme getScheme() {
      return new ReportTaskResponseStandardScheme();
    }
  }

  private static class ReportTaskResponseStandardScheme extends StandardScheme<ReportTaskResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportTaskResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeAction = org.pbccrc.zsls.api.thrift.records.NodeAction.findByValue(iprot.readI32());
              struct.setNodeActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.newTasks = new ArrayList<TTaskInfo>(_list60.size);
                TTaskInfo _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = new TTaskInfo();
                  _elem61.read(iprot);
                  struct.newTasks.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setNewTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportTaskResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeAction != null) {
        oprot.writeFieldBegin(NODE_ACTION_FIELD_DESC);
        oprot.writeI32(struct.nodeAction.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.newTasks != null) {
        if (struct.isSetNewTasks()) {
          oprot.writeFieldBegin(NEW_TASKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.newTasks.size()));
            for (TTaskInfo _iter63 : struct.newTasks)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportTaskResponseTupleSchemeFactory implements SchemeFactory {
    public ReportTaskResponseTupleScheme getScheme() {
      return new ReportTaskResponseTupleScheme();
    }
  }

  private static class ReportTaskResponseTupleScheme extends TupleScheme<ReportTaskResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportTaskResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.nodeAction.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetNewTasks()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNewTasks()) {
        {
          oprot.writeI32(struct.newTasks.size());
          for (TTaskInfo _iter64 : struct.newTasks)
          {
            _iter64.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportTaskResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.nodeAction = org.pbccrc.zsls.api.thrift.records.NodeAction.findByValue(iprot.readI32());
      struct.setNodeActionIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.newTasks = new ArrayList<TTaskInfo>(_list65.size);
          TTaskInfo _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = new TTaskInfo();
            _elem66.read(iprot);
            struct.newTasks.add(_elem66);
          }
        }
        struct.setNewTasksIsSet(true);
      }
    }
  }

}

